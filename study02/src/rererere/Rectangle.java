//package rererere;
//
//public class Rectangle {  // 사각형이 가질 수 있는 속성(너비, 높이, 넓이, 둘레)과 기능(너비/높이/넓이/둘레 구하는 기능)
//	int width; // 너비 >> 각각의 속성은 기본값 0으로 초기화 되어있고 적절한 메서드를 사용해서 값을 변경해야 함
//	int height; // 높이 >> 생성되는 사각형은 모두 서로 다른 너비와 높이를 가져야 하기 때문에 static 이 아닌 인스턴스 변수로 선언해야 함  
//	int area; // 넓이
//	int round; // 둘레
//	
//	// 너비만 구하는 기능  >> 얘가 인스턴스 변수를 쓰는 이유는 point타입의 참조변수를 사용해서 구한 좌표로 새로 생성될 사각형 객체의 너비값을 개별적으로 초기화 해줘야 하기 때문 
//	int width() {
//		Point p1 = new Point(7, 5); // 여기의 참조변수 p1, p2는 이 메서드 안에서 point 객체에 access 하기 위해 쓰는 지역변수일 뿐
//		Point p2 = new Point(7, 5);
//		// 전역변수(변수 선언 이후 프로그램의 모든 영역에서 사용 가능 >> 인스턴스화하여 사용하기 위함)  
//		// 인스턴스 변수 :: 인스턴스를 생성할 때 마다 초기화됨 // 객체를 생성해야만 사용할 수 있음
//		// 클래스 변수 :: 클래스 로드 시점에 최초 한번만 초기화 되고 객체 생성 없이도 사용 가능 // 모든 인스턴스가 공유하는 데이터(공통 값)
//		//>> 다른 클래스에서도 서로 다른 값으로 초기화하여 객체를 생성하고자 할 때
//		// 지역변수(메서드 호출시 변수가 선언된 시점에 생성되고 메서드 안에서만 사용 가능 >> 단순히 메서드 내 작업을 수행하고 값을 return 하기 위한 목적으로만 사용됨)
//		width = abs(p1.x1 - p1.x2);  // 내가 생각하는 인스턴스 변수를 쓰는 이유 :: 해당 객체의 값을 변경하기 위해서 인스턴스 변수를 사용함 (실제 객체의 값이 바뀜)
//		return width;  // 메서드 안에서 클래스 변수는 잘 사용하지 않는게 모든 인스턴스가 공유하는 공통 값
//	}				   // 객체를 생성할 때마다 값을 바꿔줄거면 클래스변수로 만들면 안되지 >> 클래스변수는 객체를 새로 생성해도 값이 안바뀌거든
//	
//	// 높이만 구하는 기능
//	int height() {
//		Point p1 = new Point(3, 10);  // 이건 인스턴스 변수를 쓰는게 맞는가 / 같은 클래스 안에 있는 인스턴스 변수를 매개변수로 받을때만 인스턴스변수를 쓰는건가 
//		Point p2 = new Point(3, 10);  // 인스턴스 변수를 쓴게 아니면 메서드 앞에 static을 붙여야 하니까 / 인스턴스 변수는 객체 생성 해야 쓸 수 있는 변수이니까 인스턴스 변수를 쓰고 있는게 맞나 
//		 							  // 인스턴스 변수와 클래스 변수는 꼭 같은 클래스파일 안에서만 적용되는 개념이 아닌건가
//		height = abs(p1.y1 - p1.y2); 
//		return height;
//	}
//	
//	// 절대값으로 변환하는 기능
//	static int abs(int x) {
//		return x < 0 ? -x : x;
//	}
//	
//}
//
//
//
//
//// 변수의 타입 > 기본형 & 참조형
//// 변수의 종류 > 지역변수 & 전역변수(인스턴스변수 & static 변수) 
//
//// 나의 문제 :: 변수의 특징이나 메서드의 특징을 자꾸 같이 묶어서 생각함
//// 전역변수 & 지역변수 >> 변수의 선언 위치에 따라 나뉨 
//// 메서드 영역 안의 지역변수는 참조형 or 기본형 으로 나뉨
//// 지역은 메서드 내에서만 사용 가능 / 전역은 모든 영역에서 사용 가능 >> 여기서 모든 영역 이라는건 접근제어자가 public 이라면 정말 모든 영역에서 가능
//// 파라미터(매개변수) :: 메서드 작업 수행시 필요한 값을 전달하는 역할
//
//// 접근제어자 :: 클래스 , 변수 또는 메서드 선언부에 함께 사용됨
//// static 변수 :: 하나의 변수를 모든 인스턴스(같은 클래스로 부터 생성된 인스턴스     )가 공유하기 때문에 인스턴스 생성에 관계없이 같은 값을 가짐
// 
//// static 메서드 :: 작업에 필요한 값들을 모두 매개변수로 받아서 처리함 / 인스턴스 변수 필요 x (static 키워드가 붙은 클래스 메서드는 인스턴스 멤버들을 사용할 수 없음)
//// >> 객체와 관련이 없는 단순 기능을 수행하는 메서드 // 굳이 인스턴스 변수 없이도 작업수행이 가능하다면 static을 붙이자
//// 인스턴스 메서드 :: 메서드의 작업을 수행하는데 인스턴스 변수를 필요로하는 메서드 
//
//// 같은 클래스에 속한 멤버들 간에 별도의 인스턴스 생성 없이도 서로 참조/ 호출이 가능하다
//// >> 같은 클래스에 속한 멤버들 >>> 한 클래스 안의 멤버변수와 메서드 를 의미
//// 그러면 b타입 클래스에서 a타입 클래스 메서를 만들때에도 인스턴스 생성없이 서로 참조 호출 가능한가
//// 근데 왜 이렇게 해야해 ? 같은 클래스 안에서 그 클래스에 대해 정의해야지 왜 a 타입 클래스 메서드를 b타입에서 만들 생각을 하니 왜 왜왜오애왜왜애
//
//
//
